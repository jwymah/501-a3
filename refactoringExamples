diff --git a/deserializer/classB.txt b/deserializer/classB.txt
index ecb265d..5722fbb 100644
--- a/deserializer/classB.txt
+++ b/deserializer/classB.txt
@@ -1,6 +1,29 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE rooty>
 <serialized>
+  <object class="ClassB" id="0">
+    <field name="val" declaringclass="ClassB">
+      <reference>1</reference>
+    </field>
+    <field name="val2" declaringclass="ClassB">
+      <reference>2</reference>
+    </field>
+    <field name="val3" declaringclass="ClassB">
+      <reference />
+    </field>
+    <field name="int1" declaringclass="ClassB">
+      <value>111</value>
+    </field>
+    <field name="string1" declaringclass="ClassB">
+      <value>Hello!</value>
+    </field>
+    <field name="intArray" declaringclass="ClassB">
+      <reference>3</reference>
+    </field>
+    <field name="stringArray" declaringclass="ClassB">
+      <reference>4</reference>
+    </field>
+  </object>
   <object class="ClassA" id="1">
     <field name="val" declaringclass="ClassA">
       <value>3</value>
@@ -28,31 +51,8 @@
     <value>2</value>
     <value>3</value>
   </object>
-  <object class="[Ljava.lang.String" id="4" length="2">
+  <object class="[Ljava.lang.String;" id="4" length="2">
     <value>hi</value>
     <value>no</value>
   </object>
-  <object class="ClassB" id="0">
-    <field name="val" declaringclass="ClassB">
-      <reference>1</reference>
-    </field>
-    <field name="val2" declaringclass="ClassB">
-      <reference>2</reference>
-    </field>
-    <field name="val3" declaringclass="ClassB">
-      <reference />
-    </field>
-    <field name="int1" declaringclass="ClassB">
-      <value>111</value>
-    </field>
-    <field name="string1" declaringclass="ClassB">
-      <value>Hello!</value>
-    </field>
-    <field name="intArray" declaringclass="ClassB">
-      <reference>3</reference>
-    </field>
-    <field name="stringArray" declaringclass="ClassB">
-      <reference>4</reference>
-    </field>
-  </object>
 </serialized>
diff --git a/deserializer/src/main/java/ClassB.java b/deserializer/src/main/java/ClassB.java
index c35a399..5360fb0 100644
--- a/deserializer/src/main/java/ClassB.java
+++ b/deserializer/src/main/java/ClassB.java
@@ -16,8 +16,17 @@ public class ClassB implements Runnable
     private ClassA val = new ClassA();
     private ClassA val2 = new ClassA(12);
     private ClassA val3;
-    private int int1 = 111;
+    public int int1;;
     private String string1 = "Hello!";
     private int[] intArray= {1,2,3};
     private String[] stringArray = {"hi", "no"};
+    
+    public int[] getIntArray()
+    {
+    	return intArray;
+    }
+    public ClassA getVal()
+    {
+    	return val;
+    }
 }
diff --git a/deserializer/src/main/java/Deserializer.java b/deserializer/src/main/java/Deserializer.java
index 86ea36f..f0c4410 100644
--- a/deserializer/src/main/java/Deserializer.java
+++ b/deserializer/src/main/java/Deserializer.java
@@ -1,15 +1,18 @@
 import java.beans.PropertyEditor;
 import java.beans.PropertyEditorManager;
 import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
+import java.io.OutputStream;
+import java.lang.reflect.Array;
 import java.lang.reflect.Field;
-import java.util.IdentityHashMap;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Map.Entry;
 
 import org.jdom2.Document;
 import org.jdom2.Element;
-import org.jdom2.JDOMException;
 import org.jdom2.input.SAXBuilder;
+import org.jdom2.output.Format;
+import org.jdom2.output.XMLOutputter;
 
 /*
  * This Java source file was auto generated by running 'gradle buildInit --type java-library'
@@ -18,7 +21,9 @@ import org.jdom2.input.SAXBuilder;
  * @author bighoon, @date 06/11/15 10:16 PM
  */
 public class Deserializer {
-	IdentityHashMap<Object, Object> deserializedMap = new IdentityHashMap<>();
+	Map<String, Object> deserializedMap = new HashMap<>();
+	Element rootNode;
+	
     public Deserializer()
     {
     	try
@@ -28,7 +33,7 @@ public class Deserializer {
     		SAXBuilder saxBuilder = new SAXBuilder();
     		Document doc = saxBuilder.build(file);
 
-    		Element rootNode = doc.getRootElement();
+    		rootNode = doc.getRootElement();
     		
     		for (Element element : rootNode.getChildren())
     		{
@@ -38,106 +43,156 @@ public class Deserializer {
     				continue; // because it may have already been instantiated due to being pointed to by another object
     			}
     			
-    			if (element.getAttribute("length") != null)
+    			deserialize(element);
+    		}
+    		
+    		for (Entry<String, Object> entry : deserializedMap.entrySet())
+    		{
+    			System.out.println("{"+entry.getKey() + "," + entry.getValue()+"}");
+    			for (Field f : entry.getValue().getClass().getDeclaredFields())
     			{
-    				System.out.println("DESERIALIZING ARRAY: " + element.getAttributeValue("class")
-    									+ " ID: " + element.getAttributeValue("id"));
-    			}
-    			else
-    			{
-	    			Class<?> classObj = Class.forName(element.getAttributeValue("class"));
-	    			classObj.getDeclaredConstructor(null).setAccessible(true);
-	    			Object newInstance = null;
-	    			try
-					{
-						newInstance = classObj.newInstance();
-						deserializedMap.put(element.getAttribute("id"), newInstance);
-						
-						System.err.println("Serializing: " + newInstance.getClass() + " ID: " + element.getAttributeValue("id"));
-						
-						// all of the element's children are fields
-						for (Element child : element.getChildren())
-						{
-							String fieldName = child.getAttributeValue("name");
-							String value = child.getChildren().get(0).getText();
-							
-							System.out.println("setting field on id {"+element.getAttributeValue("id")+"} " + classObj.toString() + ":" + fieldName + " --> " + value);
-							try
-							{
-								Field field = classObj.getDeclaredField(fieldName);
-								field.setAccessible(true);
-								
-								if (child.getChildren().get(0).getName() == "reference")
-								{
-									//TODO: find the object's reference in map if already created
-									// otherwise go and create it...
-									// or is there a better way?
-									if (deserializedMap.get(child.getAttribute("id")) != null)
-									{
-										field.set(newInstance, deserializedMap.get(child.getAttribute("id")));
-									}
-									else
-									{
-										// go deserialize a specific object
-									}
-									
-								}
-								else
-								{
-									field.set(newInstance, convert(field.getType(), value));
-								}
-							}
-							catch (NullPointerException e)
-							{
-								System.err.println(child.getChildren().get(0).getName());
-								e.printStackTrace();
-							}
-							catch (NoSuchFieldException | IllegalAccessException e)
-							{
-								// TODO Auto-generated catch block
-								e.printStackTrace();
-							}
-						}
-					}
-					catch (InstantiationException | IllegalAccessException e)
-					{
-						// TODO Auto-generated catch block
-						e.printStackTrace();
-					}
+    				f.setAccessible(true);
+    				System.out.println(f.get(entry.getValue()));
     			}
     		}
+    		
+    		ClassB b = (ClassB) deserializedMap.get("0");
+    		System.err.println(b.int1);
+    		
+//    		MySerializer mySerializer = new MySerializer();
+//    		Element reserialized = mySerializer.serialize(deserializedMap.get("0"));
+//    		System.out.println("\n\n\n\n IT STARTS NOW");
+//    		System.out.println(reserialized.getTextNormalize());
+    		
 		}
-		catch (FileNotFoundException e)
-		{
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		catch (IOException e)
-		{
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		catch (JDOMException e)
+		catch (Exception e)
 		{
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
-		catch (ClassNotFoundException e)
+    }
+
+	private void deserialize(Element element) throws ClassNotFoundException, NoSuchMethodException
+	{
+		if (element.getAttribute("length") != null)
 		{
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			System.out.println("DESERIALIZING ARRAY: " + element.getAttributeValue("class")
+								+ " ID: " + element.getAttributeValue("id"));
+			// TODO: stubbed
+			Object newArray = getComponentType(element.getAttributeValue("class"), Integer.parseInt(element.getAttributeValue("length")));
+//			Object newArray = Array.newInstance(componentType, Integer.parseInt(element.getAttributeValue("length")));
+			deserializedMap.put(element.getAttributeValue("id"), newArray);
+//			java.lang.reflect.Array.newInstance(Class<?> componentType, int length)
 		}
-		catch (SecurityException e)
+		else
 		{
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			Class<?> classObj = Class.forName(element.getAttributeValue("class"));
+			classObj.getDeclaredConstructor(null).setAccessible(true);
+			Object classInstance = null;
+			try
+			{
+				classInstance = classObj.newInstance();
+				deserializedMap.put(element.getAttributeValue("id"), classInstance);
+				System.err.println("adding to map: {" + element.getAttributeValue("id") + "," + classInstance + "}");
+				
+				System.err.println("Serializing: " + classInstance.getClass() + " ID: " + element.getAttributeValue("id"));
+				
+				setFields(element, classObj, classInstance);
+			}
+			catch (InstantiationException | IllegalAccessException e)
+			{
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
 		}
-		catch (NoSuchMethodException e)
+	}
+
+	private void setFields(Element element, Class<?> classObj, Object classInstance)
+	{
+		// all of the element's children are fields
+		for (Element child : element.getChildren())
 		{
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			String fieldName = child.getAttributeValue("name");
+			String value = child.getChildren().get(0).getText();
+			
+			System.out.println("setting field on id {"+element.getAttributeValue("id")+"} " + classObj.toString() + ":" + fieldName + " --> " + value);
+			try
+			{
+				Field field = classObj.getDeclaredField(fieldName);
+				field.setAccessible(true);
+
+				// field == null or reference or primitive
+				if (value == null)
+				{
+					//nothing
+				}
+				else if (child.getChildren().get(0).getName() == "reference")
+				{
+					//TODO: find the object's reference in map if already created
+					// otherwise go and create it...
+					// or is there a better way?
+					System.err.println("is a reference with value: " + value);
+					if (deserializedMap.get(value) != null)
+					{
+						System.err.println("EVEEEEEEEEEEEEEEEEEEEEEE"); //TODO: make sure this works
+						field.set(classInstance, deserializedMap.get(value));
+					}
+					else
+					{
+						// go deserialize a specific object...
+						// go recursive and put this call onto the stack
+						for (Element searchElement : rootNode.getChildren())
+						{
+							if (searchElement.getAttributeValue("id").compareTo(value) == 0)
+							{
+								System.err.println("FOUND IT... now go deserialize it");
+								System.out.print("key set size: ");
+								System.out.println(deserializedMap.size());
+								
+								try
+								{
+									deserialize(searchElement);
+								}
+								catch (ClassNotFoundException | NoSuchMethodException e)
+								{
+									// TODO Auto-generated catch block
+									e.printStackTrace();
+								}
+								field.set(classInstance, deserializedMap.get(value));
+								System.err.println("stored in map as: " + deserializedMap.get(value));
+								
+								for (Object object : deserializedMap.keySet())
+								{
+									System.out.println("----"+object.getClass().toString());
+									System.out.println("--" + object);
+									System.out.println("-" + deserializedMap.get(value));
+									System.out.println("value: " + value + " key: " + object);
+								}
+								break;
+							}
+						}
+					}
+				}
+				else // primitive that is not null
+				{
+					field.set(classInstance, convert(field.getType(), value));
+				}
+			}
+			catch (NullPointerException e)
+			{
+				System.err.println("is this still being hit?");
+				System.err.println(child.getChildren().get(0).getName());
+				e.printStackTrace();
+			}
+			catch (NoSuchFieldException | IllegalAccessException e)
+			{
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
 		}
-    }
+		System.out.print("key set size: ");
+		System.out.println(deserializedMap.size());
+	}
     
     // from the second answer on 
     // http://stackoverflow.com/questions/13943550/how-to-convert-from-string-to-a-primitive-type-or-standard-java-wrapper-types
@@ -146,6 +201,19 @@ public class Deserializer {
         editor.setAsText(text);
         return editor.getValue();
     }
+
+	private Object getComponentType(String className, int length) throws ClassNotFoundException{
+		if("[I".equals(className)) return Array.newInstance(int.class, length);
+		if("[D".equals(className)) return double.class;
+		if("[F".equals(className)) return float.class;
+		if("[B".equals(className)) return byte.class;
+		if("[J".equals(className)) return long.class;
+		if("[S".equals(className)) return short.class;
+		if("[Z".equals(className)) return boolean.class;
+		if("[C".equals(className)) return char.class;
+		// remove Leading [L and trailing ;
+		return Array.newInstance(Class.forName(className.substring(2,className.length()-1)), length);
+	}
     
     public static void main(String[] args)
     {
diff --git a/serializer/src/main/java/ClassB.java b/serializer/src/main/java/ClassB.java
index c35a399..e7315b9 100644
--- a/serializer/src/main/java/ClassB.java
+++ b/serializer/src/main/java/ClassB.java
@@ -20,4 +20,13 @@ public class ClassB implements Runnable
     private String string1 = "Hello!";
     private int[] intArray= {1,2,3};
     private String[] stringArray = {"hi", "no"};
+    
+    public int[] getIntArray()
+    {
+    	return intArray;
+    }
+    public ClassA getVal()
+    {
+    	return val;
+    }
 }
diff --git a/serializer/src/main/java/MySerializer.java b/serializer/src/main/java/MySerializer.java
index 72efdbe..71f973f 100644
--- a/serializer/src/main/java/MySerializer.java
+++ b/serializer/src/main/java/MySerializer.java
@@ -33,7 +33,6 @@ public class MySerializer {
 			doc.setDocType(new DocType("rooty"));
 			
 			rootElement.addContent(serialize(new ClassB()));
-//			serialize("hello");	// lots of stuff in String..
 		
 			System.out.println(doc.toString());
 		
@@ -62,7 +61,7 @@ public class MySerializer {
     	
     	if (obj.getClass().isArray())
     	{
-    		thisNode.setAttribute("class", obj.getClass().toString().substring(6).split(";")[0]);
+    		thisNode.setAttribute("class", obj.getClass().toString().substring(6));
     		thisNode.setAttribute("length", String.valueOf(Array.getLength(obj)));
 			
     		if (obj.getClass().getComponentType().isPrimitive()
diff --git a/deserializer/src/main/java/Deserializer.java b/deserializer/src/main/java/Deserializer.java
index cbb879a..3a22e9d 100644
--- a/deserializer/src/main/java/Deserializer.java
+++ b/deserializer/src/main/java/Deserializer.java
@@ -75,7 +75,7 @@ public class Deserializer {
 								+ " ID: " + element.getAttributeValue("id"));
 			
 			Object newArray = makeArray(element.getAttributeValue("class"), Integer.parseInt(element.getAttributeValue("length")));
-			Class<?> componentType = newArray.getClass().getComponentType();
+			Class<?> componentType = newArray.getClass().getComponentType(); //TODO this is giving a generic type... Class<T>
 			
 			if (newArray.getClass().getComponentType().isPrimitive())
 			{
diff --git a/driver/src/main/java/Driver.java b/driver/src/main/java/Driver.java
index a46d589..a5cf28c 100644
--- a/driver/src/main/java/Driver.java
+++ b/driver/src/main/java/Driver.java
@@ -7,7 +7,6 @@ import java.util.Scanner;
  * @author bighoon, @date 13/11/15 6:05 PM
  */
 public class Driver {
-	private static Scanner in = new Scanner(System.in);
 	private static ObjectCreator objCreator = new ObjectCreator();
 	public static void main(String[] args)
 	{
@@ -20,9 +19,9 @@ public class Driver {
 			System.out.println("3: \t send to server");
 			System.out.println("4: \t listen as server (received stream written to file)");
 			System.out.println("5: \t deserialize from file");
-			System.out.println("6: \t quit");
+			System.out.println("0: \t quit");
 			//print main menu
-			int input = in.nextInt();
+			int input = Util.getMenuIntFromUser(5);
 			
 			switch (input)
 			{
@@ -38,7 +37,7 @@ public class Driver {
 					break;
 				case 5:
 					break;
-				case 6:
+				case 0:
 					loop = false;
 			}
 		}
diff --git a/driver/src/main/java/ObjectCreator.java b/driver/src/main/java/ObjectCreator.java
index 19e2ac9..0dffda6 100644
--- a/driver/src/main/java/ObjectCreator.java
+++ b/driver/src/main/java/ObjectCreator.java
@@ -1,3 +1,4 @@
+import java.lang.reflect.Array;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
@@ -27,8 +28,8 @@ public class ObjectCreator
 			System.out.println("3: \t Object with array of primitives");
 			System.out.println("4: \t Object with array of objects");
 			System.out.println("5: \t Object with a java Collection");
-			System.out.println("6: \t Main Menu");
-			int input = Integer.parseInt(in.nextLine());
+			System.out.println("0: \t Main Menu");
+			int input = Util.getMenuIntFromUser(5);
 			
 			switch (input)
 			{
@@ -37,36 +38,148 @@ public class ObjectCreator
 					objList.add(simpleints);
 					break;
 				case 2:
-					SimpleObjects simpleobjects;
-					simpleobjects = new SimpleObjects();
-					System.out.println("making object with references");
-					for (Field field : SimpleObjects.class.getDeclaredFields())
+					SimpleObjects simpleobjects = makeSimpleObjectRefs();
+					objList.add(simpleobjects);
+					break;
+				case 3:
+					System.out.println("making object with array of primitives");
+					ArraysOfPrimitive aop = new ArraysOfPrimitive();
+					for (Field field : ArraysOfPrimitive.class.getDeclaredFields())
 					{
 						field.setAccessible(true);
-						Object value = objList.get(0); //TODO dynamic selection
+						// assume array of int[] as only fields and not null and size > 0
+						int index;
 						try
 						{
-							field.set(simpleobjects, value);
+							System.out.println("Edit array entries");
+							while (true)
+							{
+								System.out.print("enter index to modify from 0 to " + (Array.getLength(field.get(aop))-1));
+								System.out.println("or a negative int to exit");
+								index = Util.getIntFromUserWithMax(Array.getLength(field.get(aop)));
+								if (index < 0)
+								{
+									break;
+								}
+								System.out.println("enter new value");
+								int value = Util.getIntFromUser();
+								Array.setInt(field.get(aop), index, value);
+							}
+							objList.add(field.get(aop));
 						}
-						catch (IllegalArgumentException | IllegalAccessException e)
+						catch (ArrayIndexOutOfBoundsException | IllegalArgumentException | IllegalAccessException e)
 						{
 							e.printStackTrace();
 						}
 					}
-					objList.add(simpleobjects);
-					break;
-				case 3:
+					objList.add(aop);
 					break;
 				case 4:
+					System.out.println("making object with array of references");
+					ArrayOfObjectRefs aof = new ArrayOfObjectRefs();
+					for (Field field : ArrayOfObjectRefs.class.getDeclaredFields())
+					{
+						field.setAccessible(true);
+						// assume array of Object[] as only fields and not null and size > 0
+						int index;System.out.println("Edit array entries");
+						while (true)
+						{
+							try
+							{
+								System.out.print("enter index to modify from 0 to " + (Array.getLength(field.get(aof))-1));
+								System.out.println(" or a negative int to exit");
+								index = Util.getIntFromUserWithMax(Array.getLength(field.get(aof)));
+								if (index < 0)
+								{
+									break;
+								}
+								Class<?> type = field.get(aof).getClass().getComponentType();
+								System.out.println(field.get(aof).getClass().getComponentType());
+								Object value = selectCompatibleObject(type);
+								Array.set(field.get(aof), index, value);
+							}
+							catch (IllegalArgumentException | IllegalAccessException e)
+							{
+								// TODO Auto-generated catch block
+								e.printStackTrace();
+							}
+						}
+						try
+						{
+							objList.add(field.get(aof));
+						}
+						catch (IllegalArgumentException | IllegalAccessException e)
+						{
+							e.printStackTrace();
+						}
+					objList.add(aof);
+					}
 					break;
 				case 5:
 					break;
-				case 6:
+				case 0:
 					return;
 			}
 		}
 	}
 
+	private SimpleObjects makeSimpleObjectRefs()
+	{
+		System.out.println("making object with references");
+		SimpleObjects simpleobjects = new SimpleObjects();
+		for (Field field : SimpleObjects.class.getDeclaredFields())
+		{
+			field.setAccessible(true);
+			Class type = field.getType();
+			Object value = selectCompatibleObject(type);
+			try
+			{
+				field.set(simpleobjects, value);
+			}
+			catch (IllegalArgumentException | IllegalAccessException e)
+			{
+				e.printStackTrace();
+			}
+		}
+		return simpleobjects;
+	}
+
+	private Object selectCompatibleObject(Class type)
+	{
+		// compatible objects to choose
+		ArrayList<Object> compatibleList = new ArrayList<Object>();
+		for (Object o : objList.toArray())
+		{
+			if (type.isInstance(o))
+			{
+				compatibleList.add(o);
+			}
+		}
+		System.out.println("potential objects of type " + type + ":");
+		int i=0; 
+		while (i<compatibleList.size())
+		{
+			System.out.println("\t" + i + ":\t" + compatibleList.get(i));
+			i++;
+		}
+		System.out.println("\t" + compatibleList.size() + ":\tleave as null");
+		
+		Object value = null;
+		try
+		{
+			int index = Util.getMenuIntFromUser(compatibleList.size() + 1);
+			if (index < compatibleList.size())
+			{
+				value = compatibleList.get(index);
+			}
+		}
+		catch (NumberFormatException | IndexOutOfBoundsException e)
+		{
+			System.out.println("error, defaulting value to null");
+		}
+		return value;
+	}
+
 	private SimpleInts makeSimpleInts()
 	{
 		System.out.println("making a simple object with primitives");
@@ -77,7 +190,7 @@ public class ObjectCreator
 			try
 			{
 				field.setAccessible(true);
-				field.set(simpleints, Integer.parseInt(in.nextLine()));
+				field.set(simpleints, Util.getIntFromUser());
 			}
 			catch (IllegalArgumentException | IllegalAccessException e)
 			{
@@ -92,7 +205,16 @@ public class ObjectCreator
 		System.out.println("\nObjects Created:");
 		for (Object obj : objList)
 		{
-			System.out.println(obj.getClass().getName());
+			System.out.println(obj);
+			
+			if (obj.getClass().isArray())
+			{
+				for (int i=0; i<Array.getLength(obj); i++)
+				{
+					System.out.println("\t[" + i + "]" + " = " + Array.get(obj, i));
+				}
+			}
+			
 			for(Field f : obj.getClass().getDeclaredFields())
 			{
 				try
diff --git a/serializer/src/main/java/ArrayOfObjectRefs.java b/serializer/src/main/java/ArrayOfObjectRefs.java
index a83b10c..1894165 100644
--- a/serializer/src/main/java/ArrayOfObjectRefs.java
+++ b/serializer/src/main/java/ArrayOfObjectRefs.java
@@ -1,21 +1,21 @@
 public class ArrayOfObjectRefs {
 
-	public Object[] arrayObjectRefs;
+	public SimpleObjects[]  arrayObjectRefs = new SimpleObjects[5];
 
-	public ArrayOfObjectRefs()
-	{
-		arrayObjectRefs = new Object[100];
-	}
-	
-	public Object[] getArrayObjectRefs() {
-		return arrayObjectRefs;
-	}
-
-	public void setArrayObjectRefs(Object[] arrayObjectRefs) {
-		this.arrayObjectRefs = arrayObjectRefs;
-	}
-	
-	public void setArrayValue(Object value, int index) {
-		this.arrayObjectRefs[index] = value;
-	}
+//	public ArrayOfObjectRefs()
+//	{
+//		arrayObjectRefs = new Object[100];
+//	}
+//	
+//	public Object[] getArrayObjectRefs() {
+//		return arrayObjectRefs;
+//	}
+//
+//	public void setArrayObjectRefs(Object[] arrayObjectRefs) {
+//		this.arrayObjectRefs = arrayObjectRefs;
+//	}
+//	
+//	public void setArrayValue(Object value, int index) {
+//		this.arrayObjectRefs[index] = value;
+//	}
 }
\ No newline at end of file
diff --git a/serializer/src/main/java/ArraysOfPrimitive.java b/serializer/src/main/java/ArraysOfPrimitive.java
index a0affaa..13cd85d 100644
--- a/serializer/src/main/java/ArraysOfPrimitive.java
+++ b/serializer/src/main/java/ArraysOfPrimitive.java
@@ -3,7 +3,7 @@ public class ArraysOfPrimitive {
 	
 	public ArraysOfPrimitive()
 	{
-		arrayInt = new int[100];
+		arrayInt = new int[3];
 	}
 	
 	public int[] getArrayInt() {
diff --git a/serializer/src/main/java/Serializer.java b/serializer/src/main/java/Serializer.java
index d84c3e3..f416903 100644
--- a/serializer/src/main/java/Serializer.java
+++ b/serializer/src/main/java/Serializer.java
@@ -158,5 +158,6 @@ public class Serializer {
     {
     	Serializer s = new Serializer();
     	s.serialize(new CollectionObjects());
+    	System.out.println(Object.class.isInstance(String.class));
     }
 }
diff --git a/serializer/src/main/java/SimpleObjects.java b/serializer/src/main/java/SimpleObjects.java
index 853ea2f..77eb687 100644
--- a/serializer/src/main/java/SimpleObjects.java
+++ b/serializer/src/main/java/SimpleObjects.java
@@ -1,8 +1,7 @@
 public class SimpleObjects {
+	public SimpleInts ints1;
 	public Object varObj1;
 	public Object varObj2;
-	public Object varObj3;
-	public Object varObj4;
 	public Object getVarObj1() {
 		return varObj1;
 	}
@@ -15,16 +14,4 @@ public class SimpleObjects {
 	public void setVarObj2(Object varObj2) {
 		this.varObj2 = varObj2;
 	}
-	public Object getVarObj3() {
-		return varObj3;
-	}
-	public void setVarObj3(Object varObj3) {
-		this.varObj3 = varObj3;
-	}
-	public Object getVarObj4() {
-		return varObj4;
-	}
-	public void setVarObj4(Object varObj4) {
-		this.varObj4 = varObj4;
-	}
 }
\ No newline at end of file
diff --git a/serializer/src/main/java/Util.java b/serializer/src/main/java/Util.java
new file mode 100644
index 0000000..52caa3c
--- /dev/null
+++ b/serializer/src/main/java/Util.java
@@ -0,0 +1,47 @@
+import java.util.Scanner;
+
+public class Util
+{
+	private static Scanner in = new Scanner(System.in);
+	
+	public static int getMenuIntFromUser(int max)
+	{
+		int input = -1;
+		while (input < 0 || input >= max)
+		{
+			input = getIntFromUser();
+			if (input >= max)
+			{
+				System.err.println("that was not a valid selection.. try again");
+			}
+		}
+		return input;
+	}
+
+	public static int getIntFromUserWithMax(int max)
+	{
+		int input = max;
+		while (input >= max)
+		{
+			input = getIntFromUser();
+			if (input >= max)
+			{
+				System.err.println("that was not a valid selection.. try again");
+			}
+		}
+		return input;
+	}
+	
+	public static int getIntFromUser()
+	{
+		try
+		{
+			return Integer.parseInt(in.nextLine());
+		}
+		catch(Exception e)
+		{
+			System.err.println("that was not a valid selection.. try again");
+		}
+		return -1;
+	}
+}
diff --git a/serializer/src/test/java/LibraryTest.java b/serializer/src/test/java/LibraryTest.java
index df1b056..e109ac2 100644
--- a/serializer/src/test/java/LibraryTest.java
+++ b/serializer/src/test/java/LibraryTest.java
@@ -9,7 +9,7 @@ import static org.junit.Assert.*;
  */
 public class LibraryTest {
     @Test public void testSomeLibraryMethod() {
-        MySerializer classUnderTest = new MySerializer();
+//        MySerializer classUnderTest = new MySerializer();
 //        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
     }
 }
