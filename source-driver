import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.StringReader;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;

import org.jdom2.Document;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;
import org.jdom2.output.Format;
import org.jdom2.output.XMLOutputter;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'bighoon' at '13/11/15 6:05 PM' with Gradle 2.6
 *
 * @author bighoon, @date 13/11/15 6:05 PM
 */
public class Driver {
	private ObjectCreator objCreator = new ObjectCreator();
	private Serializer serializer = new Serializer();
	private int port;
	private String host;
	public static void main(String[] args)
	{
		if (args.length != 2)
		{
			System.out.println("Improper usage. requires Host and Port number as the two arguments");
			System.exit(1);
		}
		new Driver(args[0], Integer.parseInt(args[1]));
	}
	
	public Driver(String host, int port)
	{
		this.host = host;
		this.port = port;
		start();		
	}
	public void start()
	{
		boolean loop = true;
		while (loop)
		{
			System.out.println("\n\t++++++ Main Menu ++++++");
			System.out.println("1: \t Object Creator");
			System.out.println("2: \t View Objects Created");
			System.out.println("3: \t serialize and send");
			System.out.println("4: \t listen as server (received stream written to file)");
			System.out.println("0: \t quit");
			//print main menu
			int input = Util.getMenuIntFromUser(5);
			switch (input)
			{
				case 1: // enter the object creator
					objCreator.menu();
					break;
				case 2: // view created objects
					objCreator.viewObjects();
					break;
				case 3:
					System.out.println("++ select object to serialize ++");
					if (objCreator.getObjects().size() == 0)
					{
						System.out.println("no objects created to serialize");
						break;
					}
					for (int i=1; i<=objCreator.getObjects().size(); i++)
					{
						System.out.println(i + " :\t" + objCreator.getObjects().get(i-1));
					}
					System.out.println(0 + ":\tMain menu");
					int selection = Util.getMenuIntFromUser(objCreator.getObjects().size());
					if (selection == 0)
					{
						break;
					}
					Document doc = serializer.serialize(objCreator.getObjects().get(selection-1));

					XMLOutputter xmlOutput = new XMLOutputter();
					xmlOutput.setFormat(Format.getPrettyFormat());
					
					try
					{
						Socket sock = new Socket(InetAddress.getByName(host), port);
						OutputStream out = sock.getOutputStream();
						xmlOutput.output(doc, out);
						out.flush();
						out.close();
						sock.close();
					}
					catch (IOException e)
					{
						System.err.println("Could not connect to server. Are you sure host and port are correct and");
						System.err.println(" that the host is listening?");
						e.printStackTrace();
					}
					
					break;
				case 4:
					startAsServer();
					break;
				case 0:
					loop = false;
			}
		}
	}
	public void startAsServer()
	{
		while (true)
		{
			ServerSocket serverSocket = null;
			try
			{						
				serverSocket = new ServerSocket(port);
				System.out.println("Waiting on port " + port + " for incoming connections");
				Socket socket = serverSocket.accept();
				
				BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
				
				StringBuilder stringBuilder = new StringBuilder();
				
				String incoming = br.readLine();
				
				while (incoming != null)
				{
					stringBuilder.append(incoming);
					System.err.println(incoming);
					
					incoming = br.readLine();
				}
//				stringBuilder.append(incoming);
				socket.close();
				br.close();
				
				System.out.println("+++++++\t DONE RECEIVING XML. DESERIALIZING IT \t++++++\n\n");
				
				SAXBuilder saxB = new SAXBuilder();
				Document document = saxB.build(new StringReader(stringBuilder.toString().trim()));
				Deserializer deserializer = new Deserializer();
				Object deserializedObj = deserializer.deserialize(document);
	
				System.out.println("+++++++\t DONE DESERIALIZING. INSPECTING IT \t++++++\n\n");
				ObjectInspector oi = new ObjectInspector();
				oi.inspect(deserializedObj, true);
			}
			catch (IOException | JDOMException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			finally
			{
				try
				{
					serverSocket.close();
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
			}
		}
	}
}
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Scanner;

public class ObjectCreator
{
	private List<Object> objList = new ArrayList<Object>();
	private Scanner in = new Scanner(System.in);
	public ObjectCreator()
	{
		
	}
	
	public List<Object> getObjects()
	{
		return objList;
	}
	
	public void menu()
	{
		while (true)
		{
			System.out.println("\n\t++++++ Object Creator ++++++");
			System.out.println("1: \t Simple primitive Object");
			System.out.println("2: \t Ojbect with references");
			System.out.println("3: \t Object with array of primitives");
			System.out.println("4: \t Object with array of objects");
			System.out.println("5: \t Object with a java Collection");
			System.out.println("0: \t Main Menu");
			int input = Util.getMenuIntFromUser(5);
			
			switch (input)
			{
				case 1:
					SimpleInts simpleints = makeSimpleInts();
					objList.add(simpleints);
					break;
				case 2:
					SimpleObjects simpleobjects = makeSimpleObjectRefs();
					objList.add(simpleobjects);
					break;
				case 3:
					System.out.println("making object with array of primitives");
					ArraysOfPrimitive aop = new ArraysOfPrimitive();
					for (Field field : ArraysOfPrimitive.class.getDeclaredFields())
					{
						field.setAccessible(true);
						// assume array of int[] as only fields and not null and size > 0
						int index;
						try
						{
							System.out.println("Edit array entries");
							while (true)
							{
								System.out.print("enter index to modify from 0 to " + (Array.getLength(field.get(aop))-1));
								System.out.println(" or a negative int to exit");
								index = Util.getIntFromUserWithMax(Array.getLength(field.get(aop)));
								if (index < 0)
								{
									break;
								}
								System.out.println("enter new value");
								int value = Util.getIntFromUser();
								Array.setInt(field.get(aop), index, value);
							}
							objList.add(field.get(aop));
						}
						catch (ArrayIndexOutOfBoundsException | IllegalArgumentException | IllegalAccessException e)
						{
							e.printStackTrace();
						}
					}
					objList.add(aop);
					break;
				case 4:
					System.out.println("making object with array of references");
					ArrayOfObjectRefs aof = new ArrayOfObjectRefs();
					for (Field field : ArrayOfObjectRefs.class.getDeclaredFields())
					{
						field.setAccessible(true);
						// assume array of Object[] as only fields and not null and size > 0
						int index;System.out.println("Edit array entries");
						while (true)
						{
							try
							{
								System.out.print("enter index to modify from 0 to " + (Array.getLength(field.get(aof))-1));
								System.out.println(" or a negative int to exit");
								index = Util.getIntFromUserWithMax(Array.getLength(field.get(aof)));
								if (index < 0)
								{
									break;
								}
								Class<?> type = field.get(aof).getClass().getComponentType();
								System.out.println(field.get(aof).getClass().getComponentType());
								Object value = selectCompatibleObject(type);
								Array.set(field.get(aof), index, value);
							}
							catch (IllegalArgumentException | IllegalAccessException e)
							{
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
						try
						{
							objList.add(field.get(aof));
						}
						catch (IllegalArgumentException | IllegalAccessException e)
						{
							e.printStackTrace();
						}
					objList.add(aof);
					}
					break;
				case 5:
					System.out.println("Making a collections object");
					CollectionObjects co = new CollectionObjects();
					for (Field field : CollectionObjects.class.getDeclaredFields())
					{
						field.setAccessible(true);
						if (field.getClass().isInstance(Collection.class))
						{
							continue;
						}
						while (true)
						{
							System.out.println("1: Select objects to be part of the collection");
							System.out.println("0: Use default values");
							int selection = Util.getMenuIntFromUser(1);
							if (selection == 0)
							{
								break;
							}
							else
							{
								System.out.println("How many objects do you want to add to this collection?");
								selection = Util.getIntFromUser();
								if (selection < 1)
								{
									System.out.println("cannot make collection of that size. using default collection");
									break;
								}
								ArrayList<Object> al = new ArrayList<Object>();
								for (int i=0; i<selection; i++)
								{
									System.out.println("Choose an object to add to collection");
									al.add(selectCompatibleObject(Object.class));
								}
								try
								{
									field.set(co, al);
								}
								catch (IllegalArgumentException | IllegalAccessException e)
								{
									e.printStackTrace();
								}
							}
							break;
						}
					}
					objList.add(co);
					break;
				case 0:
					return;
			}
		}
	}

	private SimpleObjects makeSimpleObjectRefs()
	{
		System.out.println("making object with references");
		SimpleObjects simpleobjects = new SimpleObjects();
		for (Field field : SimpleObjects.class.getDeclaredFields())
		{
			field.setAccessible(true);
			Class type = field.getType();
			Object value = selectCompatibleObject(type);
			try
			{
				field.set(simpleobjects, value);
			}
			catch (IllegalArgumentException | IllegalAccessException e)
			{
				e.printStackTrace();
			}
		}
		return simpleobjects;
	}

	private Object selectCompatibleObject(Class type)
	{
		// compatible objects to choose
		ArrayList<Object> compatibleList = new ArrayList<Object>();
		for (Object o : objList.toArray())
		{
			if (type.isInstance(o))
			{
				compatibleList.add(o);
			}
		}
		System.out.println("potential objects of type " + type + ":");
		int i=0; 
		while (i<compatibleList.size())
		{
			System.out.println("\t" + i + ":\t" + compatibleList.get(i));
			i++;
		}
		System.out.println("\t" + compatibleList.size() + ":\tleave as null");
		
		Object value = null;
		try
		{
			int index = Util.getMenuIntFromUser(compatibleList.size() + 1);
			if (index < compatibleList.size())
			{
				value = compatibleList.get(index);
			}
		}
		catch (NumberFormatException | IndexOutOfBoundsException e)
		{
			System.out.println("error, defaulting value to null");
		}
		return value;
	}

	private SimpleInts makeSimpleInts()
	{
		System.out.println("making a simple object with primitives");
		SimpleInts simpleints = new SimpleInts();
		for (Field field : SimpleInts.class.getDeclaredFields())
		{
			System.out.println("enter " + field.getType() + " value for field: " + field.getName());
			try
			{
				field.setAccessible(true);
				field.set(simpleints, Util.getIntFromUser());
			}
			catch (IllegalArgumentException | IllegalAccessException e)
			{
				System.out.println("invalid input. skipping..");
			}
		}
		return simpleints;
	}
	
	public void viewObjects()
	{
		System.out.println("\nObjects Created:");
		for (Object obj : objList)
		{
			System.out.println(obj);
			
			if (obj.getClass().isArray())
			{
				for (int i=0; i<Array.getLength(obj); i++)
				{
					System.out.println("\t[" + i + "]" + " = " + Array.get(obj, i));
				}
			}
			
			for(Field f : obj.getClass().getDeclaredFields())
			{
				try
				{
					f.setAccessible(true);
					System.out.println("\tfield:\t" + f.getName() + "\t\tvalue:\t" + f.get(obj));
				}
				catch (IllegalArgumentException | IllegalAccessException e)
				{
				}
			}
		}
	}
}
