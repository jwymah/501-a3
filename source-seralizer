public class ArrayOfObjectRefs {

	public Object[] arrayObjectRefs;

	public ArrayOfObjectRefs()
	{
		arrayObjectRefs = new Object[8];
	}
	
	public Object[] getArrayObjectRefs() {
		return arrayObjectRefs;
	}

	public void setArrayObjectRefs(Object[] arrayObjectRefs) {
		this.arrayObjectRefs = arrayObjectRefs;
	}
	
	public void setArrayValue(Object value, int index) {
		this.arrayObjectRefs[index] = value;
	}
}public class ArraysOfPrimitive {
	public int[] arrayInt;
	
	public ArraysOfPrimitive()
	{
		arrayInt = new int[3];
	}
	
	public int[] getArrayInt() {
		return arrayInt;
	}

	public void setArrayInt(int[] arrayInt) {
		this.arrayInt = arrayInt;
	}
	
	public void setArrayValue(int value, int index) {
		this.arrayInt[index] = value;
	}
}import java.util.ArrayList;
import java.util.List;

public class CollectionObjects {
	private List<Object> listObjs = new ArrayList<Object>();
	
	public CollectionObjects(){
		listObjs = new ArrayList<Object>();
		listObjs.add(new SimpleInts());
		listObjs.add(new ArraysOfPrimitive());
		listObjs.add(new ArrayOfObjectRefs());
	}
	
	public List<?> getListObjs() {
		return listObjs;
	}

	public void setListObjs(List<Object> listObjs) {
		this.listObjs = listObjs;
	}
	
}/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'bighoon' at '04/11/15 12:16 PM' with Gradle 2.6
 *
 * @author bighoon, @date 04/11/15 12:16 PM
 */

import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.util.IdentityHashMap;
import java.util.Map;

import org.jdom2.DataConversionException;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.IllegalDataException;
import org.jdom2.output.Format;
import org.jdom2.output.XMLOutputter;

public class Serializer {
	private Integer id;
	private Map<Object, Integer> serializedMap;
	private Element rootElement;
	
	public Serializer()
	{
		id = 0;
		serializedMap = new IdentityHashMap<Object, Integer>();
	}
	
	public Document serialize(Object obj)
	{
		Document doc = null;
		rootElement = new Element("serialized");
		try
		{
			doc = new Document(rootElement);
			
			rootElement.addContent(serializeObject(obj));
		
			//System.out.println(rootElement);
		
			XMLOutputter xmlOutput = new XMLOutputter();
			xmlOutput.setFormat(Format.getPrettyFormat());
			
			OutputStream outStream = System.out;
			xmlOutput.output(doc, outStream);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		return doc;
		
	}
	
    public Element serializeObject(Object obj) throws IllegalArgumentException, IllegalAccessException, IOException, DataConversionException {
    	Field[] fields = obj.getClass().getDeclaredFields();
    	
    	Element thisNode = new Element("object")
    			.setAttribute("class", obj.getClass().getName())
    			.setAttribute("id", String.valueOf(id));
    	
    	serializedMap.put(obj, id);
    	id++;
    	
    	if (obj.getClass().isArray())
    	{
    		thisNode.setAttribute("class", obj.getClass().toString().substring(6));
    		thisNode.setAttribute("length", String.valueOf(Array.getLength(obj)));
			
    		if (obj.getClass().getComponentType().isPrimitive())
    		{
    			for (int i=0; i<Array.getLength(obj); i++)
        		{
    				Element arrayElement = new Element("value")
    						.setText(Array.get(obj, i).toString());
    				thisNode.addContent(arrayElement);
        		}
    		}
    		else
    		{
	    		for (int i=0; i<Array.getLength(obj); i++)
	    		{
	    			Element arrayItem = new Element("reference");
	    			
	    			if (Array.get(obj, i) == null)
	    			{
	    				// do nothing. allow text to be blank
	    			}
	    			else if (Array.get(obj, i) != null && serializedMap.get(Array.get(obj, i).getClass()) == null)
	    			{
	        			Element objectXml = serializeObject(Array.get(obj, i));
	    				arrayItem.setText(objectXml.getAttributeValue("id"));
	        			rootElement.addContent(objectXml);
	    			}
	    			else 
	    			{
	    				arrayItem.setText(serializedMap.get(Array.get(obj, i)).toString());
	    			}
	    			thisNode.addContent(arrayItem);
	    		}
    		}
			return thisNode;
    	}
    	
    	// for each field add an element
    	for( Field field : fields)
    	{
    		field.setAccessible(true);
    		Element newFieldElement = new Element("field")
    								.setAttribute("name", field.getName())
    								.setAttribute("declaringclass", field.getDeclaringClass().getName());
    		
    		if (field.getType().isPrimitive())
//    				|| field.getType() == String.class)
    		{
    			try
    			{
				newFieldElement.addContent(new Element("value")
											.setText(field.get(obj).toString()));
    			}
    			catch (IllegalDataException e)
    			{
    				newFieldElement.addContent(new Element("value"));
    			}
    		}
    		else // field is a reference
    		{
				Element refElement = new Element("reference");

				if (field.get(obj) != null && serializedMap.get(field.get(obj).getClass()) == null)
				{
					Element child = serializeObject(field.get(obj));
					Integer newId = child.getAttribute("id").getIntValue();
					rootElement.addContent(child);
					
					refElement.setText(String.valueOf(newId));
				}
				newFieldElement.addContent(refElement);
    		}
    		thisNode.addContent(newFieldElement);
    	}
    	
    	// for each element in array get its value or reference
    	
    	
    	return thisNode;
    }
    
    public static void main(String[] args)
    {
    	Serializer s = new Serializer();
    	s.serialize(new CollectionObjects());
    }
}
public class SimpleInts {
	private int varInt1;
	private int varInt2;
	private int varInt3;
	private int varInt4;
	public int getVarInt1() {
		return varInt1;
	}
	public void setVarInt1(int varInt1) {
		this.varInt1 = varInt1;
	}
	public int getVarInt2() {
		return varInt2;
	}
	public void setVarInt2(int varInt2) {
		this.varInt2 = varInt2;
	}
	public int getVarInt3() {
		return varInt3;
	}
	public void setVarInt3(int varInt3) {
		this.varInt3 = varInt3;
	}
	public int getVarInt4() {
		return varInt4;
	}
	public void setVarInt4(int varInt4) {
		this.varInt4 = varInt4;
	}
}public class SimpleObjects {
	public SimpleInts ints1;
	public Object varObj1;
	public Object varObj2;
	public Object getVarObj1() {
		return varObj1;
	}
	public void setVarObj1(Object varObj1) {
		this.varObj1 = varObj1;
	}
	public Object getVarObj2() {
		return varObj2;
	}
	public void setVarObj2(Object varObj2) {
		this.varObj2 = varObj2;
	}
}import java.util.Scanner;

public class Util
{
	private static Scanner in = new Scanner(System.in);
	
	public static int getMenuIntFromUser(int max)
	{
		int input = -1;
		while (input < 0 || input > max)
		{
			input = getIntFromUser();
			if (input > max)
			{
				System.err.println("that was not a valid selection.. try again");
			}
		}
		return input;
	}

	public static int getIntFromUserWithMax(int max)
	{
		int input = max;
		while (input >= max)
		{
			input = getIntFromUser();
			if (input >= max)
			{
				System.err.println("that was not a valid selection.. try again");
			}
		}
		return input;
	}
	
	public static int getIntFromUser()
	{
		try
		{
			return Integer.parseInt(in.nextLine());
		}
		catch(Exception e)
		{
			System.err.println("that was not a valid selection.. try again");
		}
		return -1;
	}
}
import org.junit.Test;
import static org.junit.Assert.*;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'bighoon' at '04/11/15 12:16 PM' with Gradle 2.6
 *
 * @author bighoon, @date 04/11/15 12:16 PM
 */
public class LibraryTest {
    @Test public void testSomeLibraryMethod() {
//        MySerializer classUnderTest = new MySerializer();
//        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }
}
