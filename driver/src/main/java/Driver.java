import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.StringReader;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;

import org.jdom2.Document;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;
import org.jdom2.output.Format;
import org.jdom2.output.XMLOutputter;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'bighoon' at '13/11/15 6:05 PM' with Gradle 2.6
 *
 * @author bighoon, @date 13/11/15 6:05 PM
 */
public class Driver {
	private ObjectCreator objCreator = new ObjectCreator();
	private Serializer serializer = new Serializer();
	private int port;
	private String host;
	public static void main(String[] args)
	{
		if (args.length != 2)
		{
			System.out.println("Improper usage. requires Host and Port number as the two arguments");
			System.exit(1);
		}
		new Driver(args[0], Integer.parseInt(args[1]));
	}
	
	public Driver(String host, int port)
	{
		this.host = host;
		this.port = port;
		start();		
	}
	public void start()
	{
		boolean loop = true;
		while (loop)
		{
			System.out.println("\n\t++++++ Main Menu ++++++");
			System.out.println("1: \t Object Creator");
			System.out.println("2: \t View Objects Created");
			System.out.println("3: \t serialize and send");
			System.out.println("4: \t listen as server (received stream written to file)");
			System.out.println("0: \t quit");
			//print main menu
			int input = Util.getMenuIntFromUser(5);
			switch (input)
			{
				case 1: // enter the object creator
					objCreator.menu();
					break;
				case 2: // view created objects
					objCreator.viewObjects();
					break;
				case 3:
					System.out.println("++ select object to serialize ++");
					if (objCreator.getObjects().size() == 0)
					{
						System.out.println("no objects created to serialize");
						break;
					}
					for (int i=1; i<=objCreator.getObjects().size(); i++)
					{
						System.out.println(i + " :\t" + objCreator.getObjects().get(i-1));
					}
					System.out.println(0 + ":\tMain menu");
					int selection = Util.getMenuIntFromUser(objCreator.getObjects().size());
					if (selection == 0)
					{
						break;
					}
					Document doc = serializer.serialize(objCreator.getObjects().get(selection-1));

					XMLOutputter xmlOutput = new XMLOutputter();
					xmlOutput.setFormat(Format.getPrettyFormat());
					
					try
					{
						Socket sock = new Socket(InetAddress.getByName(host), port);
						OutputStream out = sock.getOutputStream();
						xmlOutput.output(doc, out);
						out.flush();
						out.close();
						sock.close();
					}
					catch (IOException e)
					{
						System.err.println("Could not connect to server. Are you sure host and port are correct and");
						System.err.println(" that the host is listening?");
						e.printStackTrace();
					}
					
					break;
				case 4:
					startAsServer();
					break;
				case 0:
					loop = false;
			}
		}
	}
	public void startAsServer()
	{
		while (true)
		{
			ServerSocket serverSocket = null;
			try
			{						
				serverSocket = new ServerSocket(port);
				System.out.println("Waiting on port " + port + " for incoming connections");
				Socket socket = serverSocket.accept();
				
				BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
				
				StringBuilder stringBuilder = new StringBuilder();
				
				String incoming = br.readLine();
				
				while (incoming != null)
				{
					if (incoming.compareTo("</serialized>") == 0)
					{
						socket.close();
						break;
					}
					stringBuilder.append(incoming);
					System.err.println(incoming);
					
					incoming = br.readLine();
				}
				stringBuilder.append(incoming);
				br.close();
				
				System.out.println("+++++++\t DONE RECEIVING XML. DESERIALIZING IT \t++++++\n\n");
				
				SAXBuilder saxB = new SAXBuilder();
				Document document = saxB.build(new StringReader(stringBuilder.toString()));
				Deserializer deserializer = new Deserializer();
				Object deserializedObj = deserializer.deserialize(document);
	
				System.out.println("+++++++\t DONE DESERIALIZING. INSPECTING IT \t++++++\n\n");
				ObjectInspector oi = new ObjectInspector();
				oi.inspect(deserializedObj, true);
			}
			catch (IOException | JDOMException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			finally
			{
				try
				{
					serverSocket.close();
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
			}
		}
	}
}
